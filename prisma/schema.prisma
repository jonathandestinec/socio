// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  email     String      @unique
  username  String      @unique
  picture   String
  fullname  String
  followers Follower[]
  following Following[]
  messages  Message[]
  posts     Post[]
}

model Follower {
  id           String   @id @default(uuid())
  followerId   String
  userId       String
  User         User?    @relation(fields: [userId], references: [id])
  activityTime DateTime @default(now())
}

model Following {
  id           String   @id @default(uuid())
  userId       String
  followingId  String
  User         User?    @relation(fields: [userId], references: [id])
  activityTime DateTime @default(now())
}

model Activity {
  id       String   @id @default(uuid())
  type     String
  time     DateTime @default(now())
  userId   String
  activity String
}

model Message {
  id                     String   @id @default(uuid())
  content                String
  createdAt              DateTime @default(now())
  senderEmail            String
  senderId               String
  type                   String   @default("Normal")
  replyingToMessageId    String?
  replyingToUserId       String?
  replyingToUserPicture  String?
  replyingToUserFullname String?
  User                   User?    @relation(fields: [userId], references: [id])
  userId                 String?
}

model Post {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now())
  userId    String
  likes     Likes[]
  comments  Comment[]
  User      User      @relation(fields: [userId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  Post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
}

model Likes {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  Post      Post?    @relation(fields: [postId], references: [id])
}
